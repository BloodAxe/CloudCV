block variables
  - title="Live face detection demo - CloudCV"

extends layout

block content
    div.container
        h1 Real-time (hopefully) face detection demo using WebRTC, Socket.io and CloudCV

        img.pull-right.img-thumbnail(id="dominantColorsImage")                                
        canvas(id='augmented-reality')
        video.hidden(id="video",autoplay) 

block scripts
    script(src="/socket.io/socket.io.js")
    script.

        function dataURItoBlob(dataURI)
        {
            // convert base64 to raw binary data held in a string
            // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
            var comp = dataURI.split(',');

            var byteString = window.atob(comp[1]);

            // separate out the mime component
            var mimeString = comp[0].split(':')[1].split(';')[0];

            // write the bytes of the string to an ArrayBuffer
            var ab = new ArrayBuffer(byteString.length);
            var ia = new Uint8Array(ab);
            var i;

            for (i = 0; i < byteString.length; i++)
            {
              ia[i] = byteString.charCodeAt(i);
            }

            return new Blob([ab], { type: mimeString });
        }

        $(document).ready(function () {
            var getUserMedia;
            var browserUserMedia =  navigator.webkitGetUserMedia ||  // WebKit
                                    navigator.mozGetUserMedia    ||  // Mozilla FireFox
                                    navigator.getUserMedia;         // 2013...
            if ( !browserUserMedia ) throw 'Your browser doesn\'t support WebRTC';

            getUserMedia = browserUserMedia.bind( navigator );

            var videoElement = document.getElementById( 'video' );
            var mediaStream  = null;
            var streaming    = false;

            console.log(videoElement);

            function setupCapture_canvas(socket) {
                var interval  = 30;
                var canvas    = document.getElementById("augmented-reality");
                
                canvas.width  = videoElement.videoWidth;
                canvas.height = videoElement.videoHeight;

                canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height); 
                var dataUrl = canvas.toDataURL("image/jpeg");
                socket.emit('frame', dataUrl);
                
                //$("#faces").attr('src', dataUrl);

                /*
                setInterval(function() {
                    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height); 
                    var dataUrl = canvas.toDataURL("image/jpeg");
                    socket.emit('frame', dataUrl);
                }, interval);
                */
                
                socket.on('result', function (data) {

                    canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height); 
                    var dataUrl = canvas.toDataURL("image/jpeg");
                    socket.emit('frame', dataUrl);

                    var c2 = canvas.getContext('2d');
                    c2.fillStyle = '#f00';

                    for (var marker = 0; marker < data.length; marker++)
                    {
                        var m = data[marker].points;
                        console.log(m);

                        c2.beginPath();
                        c2.moveTo(m[0].x, m[0].y);
                        c2.lineTo(m[1].x, m[1].y);
                        c2.lineTo(m[2].x, m[2].y);
                        c2.lineTo(m[3].x, m[3].y);
                        c2.closePath();
                        c2.fill();
                    }

                });
                
            }

            videoElement.addEventListener('canplay', function(ev) {
                console.log("Received canplay event");

                if (!streaming) {
                    var w = videoElement.videoWidth;
                    var h = videoElement.videoHeight;
                    console.log(w, h);
                    streaming = true;

                    var socket = io.connect('/socket/detectMarkers');

                    socket.on('connect', function (e) {
                        console.log("Socket connected");
                        setupCapture_canvas(socket);
                    });



                }
            }, false);

            getUserMedia(
                {
                    audio: false,
                    video: true
                },
                
                function( stream ) {
                    mediaStream = stream;
                    console.log( stream );
                    videoElement.src = URL.createObjectURL( stream );
                    //videoElement.play();
                },

                function( err ) {
                    console.error("Error in getUserMedia");
                    console.error( err );
                }
            );
        });
